using Google.Apis.Auth.OAuth2;
using Google.Cloud.Firestore;
using Google.Cloud.Firestore.V1;
using Grpc.Auth;

namespace FastestQuiz.Models
{
    public class FirebaseService
    {
        private readonly FirestoreDb firestoreDb;

        public FirebaseService(IConfiguration configuration)
        {
            var environment = configuration["ASPNETCORE_ENVIRONMENT"] ?? "Production";
            var projectId = configuration["Firebase:ProjectId"];

            if (string.IsNullOrEmpty(projectId))
            {
                throw new Exception("ProjectId não está configurado no appsettings.json ou nas variáveis de ambiente.");
            }

            GoogleCredential credentials;
            if (environment == "Development")
            {
                // Usar o arquivo local em desenvolvimento
                string credentialsPath = "firestore-credential.json";
                if (!File.Exists(credentialsPath))
                {
                    throw new Exception("O arquivo firestore-credential.json não foi encontrado no ambiente local.");
                }
                credentials = GoogleCredential.FromFile(credentialsPath);
            }
            else
            {
                // Usar variável de ambiente em produção
                var credentialJson = Environment.GetEnvironmentVariable("FIRESTORE_CREDENTIAL");
                if (string.IsNullOrEmpty(credentialJson))
                {
                    throw new Exception("Credenciais do Firestore não configuradas na variável de ambiente.");
                }
                credentials = GoogleCredential.FromJson(credentialJson);
            }

            var firestoreClient = new FirestoreClientBuilder
            {
                ChannelCredentials = credentials.ToChannelCredentials()
            }.Build();

            firestoreDb = FirestoreDb.Create(projectId, firestoreClient);
        }




        // Responsável por receber a coleção e transforma em um objeto
        public async Task<List<Quiz>> ListQuizzesAsync()
        {
            var quizzesCollection = firestoreDb.Collection("quizzes");
            var snapshot = await quizzesCollection.GetSnapshotAsync();

            var quizzes = new List<Quiz>();

            if (snapshot.Count == 0)
            {
                return quizzes;// Retorna uma lista vazia se não houver quizzes
            }
            else
            {
                foreach (var document in snapshot.Documents)
                {
                    // Mapeia os documentos para objetos Quiz
                    var quiz = new Quiz
                    {
                        Id = document.GetValue<string>("id") ?? "Sem id",
                        Name = document.GetValue<string>("name") ?? "Sem nome",
                        Author = document.GetValue<string>("author") ?? "Sem autor",
                        Date = document.GetValue<DateTime>("date"),
                        LastUpdate = document.GetValue<DateTime>("lastUpdate")
                    };
                    quizzes.Add(quiz); // adiciona o quiz na lista
                }
            }
            return quizzes; // Retorna a lista de quizzes
        }

        public async Task AddQuizzesAsync(IFormCollection formCollection)
        {
            var quizzesCollection = firestoreDb.Collection("quizzes");

            // Capture field values
            var name = formCollection["name"].FirstOrDefault();
            var description = formCollection["description"].FirstOrDefault();
            var question1 = formCollection["question1"].FirstOrDefault();
            var question2 = formCollection["question2"].FirstOrDefault();
            var question3 = formCollection["question3"].FirstOrDefault();
            var question4 = formCollection["question4"].FirstOrDefault();
            var author = "user";
            var date = Timestamp.FromDateTime(DateTime.UtcNow); // Converte para Timestamp
            var lastUpdate = date;

            // Create dictionary with the data to send to firestore
            var newQuiz = new Dictionary<string, object>
            {
                { "name", name },
                { "description", description},
                { "question1", question1 },
                { "question2", question2 },
                { "question3", question3 },
                { "question4", question4 },
                { "author", author },
                { "date", date },
                { "lastUpdate", lastUpdate}
            };

            // Add the new user to firestore
            var docRef = await quizzesCollection.AddAsync(newQuiz);

            // capture the id generated by firestore
            var generatedId = docRef.Id;

            //Update the document to include the generated id
            await docRef.UpdateAsync(new Dictionary<string, object>
            {
                { "id", generatedId } // Adiciona o ID no próprio documento
            });
        }


        // Buscar quiz por id
        public async Task<Quiz> GetQuizByIdAsync(string id)
        {
            //buscando
            var quizDocument = firestoreDb.Collection("quizzes").Document(id);

            //obtem snapshot do documet.
            var snapshot = await quizDocument.GetSnapshotAsync();

            // verifica se o documento existe

            if(snapshot.Exists)
            {
                //converte os dados do snapshot para o objeto Quiz
                var quiz = new Quiz
                {
                    Id = snapshot.GetValue<string>("id") ?? "sem id",
                    Name = snapshot.GetValue<string>("name") ?? "sem nome",
                    Description = snapshot.GetValue<string>("description") ?? "sem description",
                    Author = snapshot.GetValue<string>("author") ?? "sem author",
                    Question1 = snapshot.GetValue<string>("question1") ?? "sem author",
                    Question2 = snapshot.GetValue<string>("question2") ?? "sem author",
                    Question3 = snapshot.GetValue<string>("question3") ?? "sem author",
                    Question4 = snapshot.GetValue<string>("question4") ?? "sem author",
                    Date = snapshot.GetValue<DateTime>("date"),
                    LastUpdate = snapshot.GetValue<DateTime>("lastUpdate")
                };

                return quiz; // retorna o objeto quiz
            }

            return null;
        }
    }
}